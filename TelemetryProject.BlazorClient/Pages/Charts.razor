@page "/charts"
@attribute [Authorize]

@using Radzen;
@using Radzen.Blazor;
@using TelemetryProject.Common.Models;
@using TelemetryProject.CommonClient.Services;
@inject ISignalRClientService signalRClientService;
@inject IHumidexService humidexService;
@inject NotificationService notifier

<PageTitle>Charts</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" Gap="2rem">
    <RadzenText TextStyle="TextStyle.H3">Time Interval</RadzenText>

    <RadzenCard>
        <HumidexLineGraph Humidexes="@intervalHumidexes" />
    </RadzenCard>

    <RadzenRow JustifyContent="JustifyContent.Center" Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                <RadzenText TextStyle="TextStyle.Subtitle1">Start time</RadzenText>
                <RadzenDatePicker @bind-Value=@startDateTime />
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenText TextStyle="TextStyle.Subtitle1">End time</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Style="text-align:right">
                        <RadzenSwitch @bind-Value=@useEndDateTime />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenDatePicker @bind-Value=@endDateTime Disabled=@(!useEndDateTime) />
            </RadzenStack>
        </RadzenStack>
    </RadzenRow>

    <RadzenRow JustifyContent="JustifyContent.Center" Gap="1rem">
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
            <RadzenButton Click=@(UpdateHumidexGraphAsync) IsBusy=@isUpdating>Update</RadzenButton>
        </RadzenStack>
    </RadzenRow>

    <hr />

    <RadzenText TextStyle="TextStyle.H3">Live Measurements</RadzenText>

    <RadzenCard>
        <HumidexLineGraph Humidexes="@liveHumidexes" />
    </RadzenCard>

    <RadzenRow JustifyContent="JustifyContent.Center" Gap="1rem">
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
            <RadzenButton Click="@(ToggleLiveSynchronization)"
                          Shade="@(isSynchronizing ? Shade.Dark : Shade.Default)"
                          ButtonStyle="@(isSynchronizing ? ButtonStyle.Danger : ButtonStyle.Primary)">
                @(isSynchronizing ? "Stop" : "Sync")
            </RadzenButton>
        </RadzenStack>
    </RadzenRow>
</RadzenStack>

@code {
    ICollection<Humidex> intervalHumidexes = new List<Humidex>();
    ICollection<Humidex> liveHumidexes = new List<Humidex>();

    private DateTime? startDateTime = DateTime.UtcNow - TimeSpan.FromMinutes(15);
    private DateTime? endDateTime = DateTime.UtcNow;

    private bool isUpdating = false;
    private bool isSynchronizing = false;

    private bool useEndDateTime = true;

    protected override async Task OnInitializedAsync()
    {
        await UpdateHumidexGraphAsync();

        await base.OnInitializedAsync();
    }

    public async Task UpdateHumidexGraphAsync()
    {
        isUpdating = true;

        if (intervalHumidexes.Any())
        {
            intervalHumidexes.Clear();
        }

        if (startDateTime.HasValue)
        {
            var start = startDateTime.Value;
            var end = (useEndDateTime && endDateTime.HasValue ? endDateTime.Value : DateTime.MaxValue.ToUniversalTime());

            intervalHumidexes = await humidexService.GetHumidexesAsync(start, end);
        }

        isUpdating = false;
    }

    public void ToggleLiveSynchronization()
    {
        if (isSynchronizing)
        {
            signalRClientService.StopLiveHumidex();
            isSynchronizing = false;

            return;
        }

        isSynchronizing = true;
        signalRClientService.StartLiveHumidex(AddLiveHumidex);
    }

    private void AddLiveHumidex(Humidex humidex)
    {
        liveHumidexes.Add(humidex);
        InvokeAsync(StateHasChanged);
    }
}
